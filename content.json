{"meta":{"title":"未拥的博客","subtitle":"","description":"","author":"未拥","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"用Java实现四则运算","slug":"用Java实现四则运算","date":"2019-11-13T12:57:43.000Z","updated":"2019-11-13T13:16:48.524Z","comments":true,"path":"2019/11/13/用Java实现四则运算/","link":"","permalink":"http://yoursite.com/2019/11/13/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/","excerpt":"我们有时希望程序能对分数（分子分母都是整数）进行四则运算，而且两个分数四则运算的结果仍是分数。分数也称为有理数，是我们很熟悉的一种数，这个实验要求用类实现对有理数的封装。有理数有两个重要的成员：分子和分母，另外还有重要的四则运算。","text":"我们有时希望程序能对分数（分子分母都是整数）进行四则运算，而且两个分数四则运算的结果仍是分数。分数也称为有理数，是我们很熟悉的一种数，这个实验要求用类实现对有理数的封装。有理数有两个重要的成员：分子和分母，另外还有重要的四则运算。 Rational(有理数)类： 两个int成员变量，numerator（分子）和denominator（分母）。 Rational add（Rational r）方法，加法运算 Rational sub（Rational r）方法，减法运算 Rational muti（Rational r）方法，乘法运算 Rational div（Rational r）方法，除法运算 具体代码如下： Rational类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package 四则运算;public class Rational &#123; int numerator,denominator; Rational()&#123;&#125; Rational(int a,int b)&#123; setNumeratorAndDenominator(a,b); &#125; void setNumeratorAndDenominator(int a,int b)&#123; //设置分子和分母 int c=f(Math.abs(a),Math.abs(b)); //计算最大公约数 numerator=a/c; denominator=b/c; if(numerator&lt;0 &amp;&amp; denominator&lt;0)&#123; numerator=-numerator; denominator=-denominator; &#125; &#125; int getNumerator()&#123; //获取分子 return numerator; &#125; int getDenominator()&#123; //获取分母 return denominator; &#125; int f(int a,int b)&#123; if(a&lt;b)&#123; //如果a&lt;b，则a和b互换值 int c=a; a=b; b=c; &#125; int r=a%b; while(r!=0)&#123; //一直运算下去，求最大公约数 a=b; b=r; r=a%b; &#125; return b; &#125; Rational add(Rational r)&#123; //加法运算 int a=r.getNumerator(); int b=r.getDenominator(); int newNumerator=numerator*b+denominator*a; //分子的运算 int newDenominator=denominator*b; //分母的运算 Rational result=new Rational(newNumerator,newDenominator); return result; &#125; Rational sub(Rational r)&#123; //减法运算 int a=r.getNumerator(); int b=r.getNumerator(); int newNumerator=numerator*b-denominator*a; //分子的运算 int newDenominator=denominator*b; //分母的运算 Rational result=new Rational(newNumerator,newDenominator); return result; &#125; Rational muti(Rational r)&#123; //乘法运算 int a=r.getNumerator(); int b=r.getNumerator(); int newNumerator=numerator*a; //分子的运算 int newDenominator=denominator*b; //分母的运算 Rational result=new Rational(newNumerator,newDenominator); return result; &#125; Rational div(Rational r)&#123; //除法运算 int a=r.getNumerator(); int b=r.getNumerator(); int newNumerator=numerator*b; //分子的运算 int newDenominator=denominator*a; //分母的运算 Rational result=new Rational(newNumerator,newDenominator); return result; &#125;&#125; Computer类 123456789101112131415161718192021222324252627282930package 四则运算;public class Computer &#123; public static void main(String args[])&#123; Rational r1; r1=new Rational(1,5); //创建分子、分母分别为1和5的有理数r1 Rational r2; r2=new Rational(3,2); //创建分子、分母分别为3和2的有理数r2 Rational result=r1.add(r2); //r1调用方法和r2做加法运算 int a=result.getNumerator(); //result调用方法返回自己的分子 int b=result.getDenominator(); //result调用方法返回自己的分母 double p=a; double q=b; double doubleResult=p/q; System.out.print(\"分数\"+r1.getNumerator()+\"/\"+r1.getDenominator()); System.out.print(\"与分数\"+r2.getNumerator()+\"/\"+r2.getDenominator()+\"的和等于\"); System.out.print(a+\"/\"+b+\"=\"+doubleResult); r1.setNumeratorAndDenominator(4, 7); r2.setNumeratorAndDenominator(-5, 20); result=r1.muti(r2); a=result.getNumerator(); b=result.getDenominator(); p=a; q=b; doubleResult=p/q; System.out.print(\"分数\"+r1.getNumerator()+\"/\"+r1.getDenominator()); System.out.print(\"与分数\"+r2.getNumerator()+\"/\"+r2.getDenominator()+\"的积等于\"); System.out.print(a+\"/\"+b+\"=\"+doubleResult); &#125;&#125; 注：Rational类和Computer类是处于同一个包中！","categories":[],"tags":[{"name":"Java 四则运算 分数的运算","slug":"Java-四则运算-分数的运算","permalink":"http://yoursite.com/tags/Java-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-%E5%88%86%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97/"}]},{"title":"《笑傲江湖》人物出场统计","slug":"《笑傲江湖》人物出场统计","date":"2019-11-13T11:49:16.000Z","updated":"2019-11-13T12:07:14.491Z","comments":true,"path":"2019/11/13/《笑傲江湖》人物出场统计/","link":"","permalink":"http://yoursite.com/2019/11/13/%E3%80%8A%E7%AC%91%E5%82%B2%E6%B1%9F%E6%B9%96%E3%80%8B%E4%BA%BA%E7%89%A9%E5%87%BA%E5%9C%BA%E7%BB%9F%E8%AE%A1/","excerpt":"本文是关于jieba库使用的一个经典案例，《笑傲江湖》人物出场统计，输出人物出场排名前十的名字。","text":"本文是关于jieba库使用的一个经典案例，《笑傲江湖》人物出场统计，输出人物出场排名前十的名字。 安装jieba库cmd输入：pip3 install jieba 《笑傲江湖》人物出场统计人物出场统计涉及对词汇的统计。中文文章需要分词才能进行词频统计，这需要用到jieba库。《笑傲江湖》文本保存为xajh.text。实现代码如下： 12345678910111213141516171819202122232425import jiebaexcludes=&#123;\"甚么\",\"说道\",\"自己\",\"一个\",\"师父\",\"剑法\",\"咱们\",\"弟子\",\"一声\",\"不是\",\"恒山\",\"他们\",\"长剑\",\"出来\",\"不知\",\"知道\",\"武功\",\"二人\",\"只是\",\"突然\",\"嵩山\",\"我们\",\"心想\",\"如此\",\"倘若\",\"如何\",\"你们\",\"便是\"&#125;filename=\"\" #定义一个空字符串filename=r\"C:\\Users\\pc\\AppData\\Local\\Programs\\Python\\python例子\\xajh.txt\"#文件夹位置txt=open(filename,'r',encoding='utf-8').read()words=jieba.lcut(txt)counts=&#123;&#125; #定义counts为一个空集合for word in words: if len(word) == 1: #排除单个字符的分词结果 continue elif word == \"大师哥\" or word == \"冲儿\" or word == \"冲哥\" or word == \"令狐大哥\" or word == \"令狐掌门\": rword=\"令狐冲\" elif word == \"师妹\": rword=\"盈盈\" else: rword=word counts[rword]=counts.get(rword,0) +1 #如果word在counts中，则返回word对应的值，否则返回0for word in excludes: del(counts[word]) #排除词库excludesitems = list(counts.items()) #将字典转换为记录列表items.sort(key=lambda x:x[1],reverse=True) #以记录第二列排序for i in range(10): word,count=items[i] print(\"&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;\".format(word,count)) 上面代码是加入了排除词库excludes的代码，一开始分词频率最高的是“甚么”，“说道”之类的，这就需要我们加入排除词库excludes，并一点点扩大，排除那些人名无关的词汇。最后输出结果如下：（本人不太清楚笑傲江湖的人物关系构造，可能会出现人物重叠，结果仅供参考）","categories":[],"tags":[{"name":"jieba库案例","slug":"jieba库案例","permalink":"http://yoursite.com/tags/jieba%E5%BA%93%E6%A1%88%E4%BE%8B/"}]},{"title":"hexo搭建博客","slug":"hexo搭建博客","date":"2019-11-11T11:35:46.773Z","updated":"2019-11-12T13:33:43.119Z","comments":true,"path":"2019/11/11/hexo搭建博客/","link":"","permalink":"http://yoursite.com/2019/11/11/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"title: hexo搭建博客date: 2019-11-11 19:35:46tags: hexo搭建博客 个人博客这个事情不管是社招还是校招，对你的加分项可以说是非常非常大的，所以说IT的嘛，程序猿应该有一个自己的个人博客。 ​ 搭建博客的过程中肯定会出现各种各样的问题，首先不要畏惧它，大不了再重头再来。 ​ 下面是我从小白一点一点用hexo搭建起来的博客的步骤，我感觉还是比较详细的，希望能给大家带来帮助叭！","text":"title: hexo搭建博客date: 2019-11-11 19:35:46tags: hexo搭建博客 个人博客这个事情不管是社招还是校招，对你的加分项可以说是非常非常大的，所以说IT的嘛，程序猿应该有一个自己的个人博客。 ​ 搭建博客的过程中肯定会出现各种各样的问题，首先不要畏惧它，大不了再重头再来。 ​ 下面是我从小白一点一点用hexo搭建起来的博客的步骤，我感觉还是比较详细的，希望能给大家带来帮助叭！ 准备工作1. 安装node.js​ 安装地址：nodejs.org cmd查看node是否安装上了，node -v，出现了版本信息就是安装成功了 2. 安装Git​ 下载地址：https://git-scm.com/download/win cmd查看是否安装成功，输入git -version，有版本信息就是安装成功了 3. 注册GitHub​ 去GitHub官网注册就好啦，很简单的 4. 安装npm​ npm国内下载速度不太行，可选用淘宝镜像的方式： ​ npm install -g cnpm –registry=https://registry.npm.taobao.org ​ cmd查看是否安装成功，输入cnpm -v，有版本信息就是安装成功了 5. 安装hexo​ cnpm install -g hexo-cli ​ cmd查看是否安装成功，输入hexo -v验证是否安装成功 进入正题一.部署环境​ 1. 首先打开cmd ​ 2. 进入一个盘符之后，输入mkdir blog创建blog子目录，然后去查看是否创建成功，成功则进行下一步 ​ 3. 输入hexo init初始化博客，自动生成博客基础的各个文件，以后博客都是基于这个做 ​ ​ ​ 4. 显示这个样子就是安装成功了 ​ ​ 5. 自动创建的文件如图所示，点开看看创建成功了没有，失败了也没事，大不了重头再来 ​ 6. 输入hexo server启动博客 ​ 7. 标注的地方就是本地预览的地址 ​ 8. 接下来创建一个自己的博客，hexo new “我的第一篇博客文章”，引号里面就是文章的题目， 接下来就是编辑文件了，我个人建议使用Typora，这个软件编辑文档，插入代码图片都比较方便。 ​ 9. 再次生成博客 ​ hexo clean（清理一下） ​ hexo g（重新生成） ​ hexo s（在本地访问预览） 二.接下来演示如何将自己博客部署到GitHub上公开使用​ 1. 登陆GitHub ​ ​ 1.1 用户部署个人博客的GitHub仓库的命名必须符合要求才行，例如：xxx.github.io，xxx是你的名字。 ​ 1.2 描述一下这个文章 ​ 1.3 创建确定 ​ 2. 在cmd中输入npm install hexo-deployer-git –save，这个是Git的部署插件 ​ 3. 修改_config.yml文件 ​ notepad _config.yml,打开文件，拉到最下面，修改如图所示，repo后面是自己仓库的地址,注：冒号后面有一个空格！！！一定要打上空格！！！ ​ 4. 部署到远端：hexo d 三.如何更换博客主题 向大家推荐一个比较好用的主题地址： github.com/litten/hexo-theme-yilia 下载该主题 cmd输入git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia (这个仓库下载的可能比较慢，耐心等待呀) 修改_config.yml cmd输入notepad _config.yml,打开文件修改主题为yilia hexo clean 清理一下 hexo g 重新生成 hexo s 在本地预览 hexo d 上传（可能不会立马更新，等待一下再刷新） 图片乱码的问题 安装引入图片的插件： cmd输入cnpm install https://github.com/CodeFalling/hexo-asset-image –save 输入notepad _config.yml 将post_asset_folder:false改为post_asset_folder:true 运行hexo new ‘xxx’ xxx为你文章的题目，运行之后会出现一个同名的文件夹，将需要上传的图像放在该文件夹中，图像格式： 1![](/图片名字.图片格式)","categories":[],"tags":[]}]}